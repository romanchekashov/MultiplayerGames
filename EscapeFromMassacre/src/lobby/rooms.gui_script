local MainState = require "src.main_state"
local Buttons = require "src.utils.buttons"
local MSG = require "src.utils.messages"
local btnAction = Buttons.action

local druid = require("druid.druid")
local data_list = require("druid.extended.data_list")
local input = require("druid.extended.input")

-- rooms data list
local function room_create_function(self, data, index, data_list)
	-- In data list create funtion we made all init stuff for this node
	local nodes = gui.clone_tree(self.prefab)
	local root = nodes["prefab"]
	gui.set_enabled(root, true)
	gui.set_text(nodes["text"], string.format("%s: survs %d / family %d", data.name, data.survivors.length, data.family.length))

	local button = self.druid:new_button(root, function()
		print(data.name)
		gui.set_text(gui.get_node("room"), data.name)
		self.selectedRoom = data
		gui.set_enabled(gui.get_node("description"), true)
		MSG.BROADSOCK:get_rooms()
	end)
	button:set_click_zone(data_list.scroll.view_node)
	-- We should return in this function root node and optionally - Druid component
	return root, button
end

local function room_updateDataList(self)
	local data = {}
	MainState.rooms:for_each(function (room)
		table.insert(data, room)
	end)
	self.data_list:set_data(data)

	if self.selectedRoom == nil then
		return
	end

	self.selectedRoom = MainState.rooms:find("name", self.selectedRoom.name)
	-- survivors
	local survivors = {}
	self.selectedRoom.survivors:for_each(function (c_uid)
		print("survivors", c_uid)
		table.insert(survivors, {uid = c_uid, username = string.format("user - %d", c_uid)})
	end)

	self.survivors_data_list.data_list:set_data(survivors)

	-- family
	local family = {}
	self.selectedRoom.family:for_each(function (c_uid)
		print("family", c_uid)
		table.insert(family, {uid = c_uid, username = string.format("user - %d", c_uid)})
	end)

	self.family_data_list.data_list:set_data(family)
end

local function room_show_results(self)
	self.prefab = gui.get_node("prefab")
	gui.set_enabled(self.prefab, false)

	self.scroll = self.druid:new_scroll("data_list_view", "data_list_content")
	self.scroll:set_horizontal_scroll(false)
	self.grid = self.druid:new_static_grid("data_list_content", "prefab", 1)

	-- Pass already created scroll and grid components to data_list:
	self.data_list = self.druid:new_data_list(self.scroll, self.grid, room_create_function)

	self.data_list:set_data({})
end

-- players data list
local function player_show_results(self, prefix)
	local M = {}
	function M.player_create_function(self, data, index, data_list)
		-- In data list create funtion we made all init stuff for this node
		local nodes = gui.clone_tree(self.prefab)
		local root = nodes["prefab"]
		gui.set_enabled(root, true)
		gui.set_text(nodes["text"], data.username)

		local button = self.druid:new_button(root, function()
			print(data.username)
			self.selectedPlayer = data
		end)
		button:set_click_zone(data_list.scroll.view_node)
		-- We should return in this function root node and optionally - Druid component
		return root, button
	end

	M.prefab = gui.get_node(prefix .. "prefab")
	gui.set_enabled(M.prefab, false)

	M.scroll = self.druid:new_scroll(prefix .. "data_list_view", prefix .. "data_list_content")
	M.scroll:set_horizontal_scroll(false)
	M.grid = self.druid:new_static_grid(prefix .. "data_list_content", prefix .. "prefab", 1)

	-- Pass already created scroll and grid components to data_list:
	M.data_list = self.druid:new_data_list(M.scroll, M.grid, M.player_create_function)

	M.data_list:set_data({})
	return M
end

local function canStartGame(room)
	local half_players_count = (room.family.length + room.survivors.length) / 2
	return room.ready_players > half_players_count
end

local function register_druid_extended_components(self)
	druid.register("data_list", data_list)
	druid.register("input", input)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.selectedRoom = nil
	gui.set_enabled(gui.get_node("description"), false)
	self.druid = druid.new(self)
	register_druid_extended_components(self)
	room_show_results(self)
	self.survivors_data_list = player_show_results(self, "survivors/")
	self.family_data_list = player_show_results(self, "family/")

	self.input_username = self.druid:new_input("input_box_usual", "input_text_usual")
	self.input_username.on_input_text:subscribe(function (self, text)
		local text_width = self.input_username.total_width
		print(text_width, text, #text)
		if #text > 30 then
			self.input_username:set_text(text:sub(1, 30))
		else
			MSG.BROADSOCK:set_player_username({username = text})
		end
	end)

	MSG.BROADSOCK:get_rooms()
end


function final(self)
	self.druid:final()
	msg.post(".", "release_input_focus")
end


function update(self, dt)
	self.druid:update(dt)
end


function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)

	if message_id == hash("show") then
        gui.set_enabled(gui.get_node("panel-game-over"), true)
		room_show_results(self)
    elseif message_id == hash("hide") then
        gui.set_enabled(gui.get_node("panel-game-over"), false)
    elseif message_id == MSG.ROOMS.RECIEVE_ROOMS.hash then
        room_updateDataList(self)
		if self.selectedRoom ~= nil then
			if canStartGame(self.selectedRoom) then
				gui.set_text(gui.get_node("btn-join-/text"), "Start Game")
			else
				gui.set_text(gui.get_node("btn-join-/text"), "Ready")
			end
		end
	elseif message_id == hash("set_username") then
        -- format max 30 characters
		self.input_username:set_text(string.format("%.30s!", message.username))
	elseif message_id == hash("game_start") then
		msg.post("/screens#main", "load_screen", {map_level = MainState.GAME_SCREENS.GAME})
    end
end


function on_input(self, action_id, action)
	if action_id == hash("touch") then
		btnAction(action, "btn-start-game", nil, nil, function ()
			if not canStartGame(self.selectedRoom) then
				MSG.BROADSOCK:player_ready({room_name = self.selectedRoom.name})
			end
		end)
		btnAction(action, "survivors/btn", nil, nil, function ()
			print("survivors/btn")
			if self.selectedRoom ~= nil and self.selectedRoom.survivors.length - self.selectedRoom.family.length < 1 then
				MSG.BROADSOCK:join_room({room_name = self.selectedRoom.name, type = "survivors"})
				MainState.player.type = MainState.PLAYER_TYPE.SURVIVOR
			end
			-- self.selectedRoom:joinSurvivors(MainState.player.uid)
			-- room_updateDataList(self)
		end)
		btnAction(action, "family/btn", nil, nil, function ()
			print("family/btn")
			if self.selectedRoom ~= nil and self.selectedRoom.family.length - self.selectedRoom.survivors.length < 1 then
				MSG.BROADSOCK:join_room({room_name = self.selectedRoom.name, type = "family"})
				MainState.player.type = MainState.PLAYER_TYPE.FAMILY
			end
			-- self.selectedRoom:joinFamily(MainState.player.uid)
			-- room_updateDataList(self)
		end)
	end

	return self.druid:on_input(action_id, action)
end
