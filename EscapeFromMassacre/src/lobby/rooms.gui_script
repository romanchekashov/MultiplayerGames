local MainState = require "src.main_state"
local MSG = require "src.utils.messages"
local Buttons = require "src.utils.buttons"
local btnAction = Buttons.action
local Storage = require "src.utils.storage"
local debugUtils = require "src.utils.debug-utils"

local druid = require("druid.druid")
local data_list = require("druid.extended.data_list")
local input = require("druid.extended.input")
local timer_component = require("druid.extended.timer")

local log = debugUtils.createLog("[ROOMS GUI_SCRIPT]").log

local UPDATE_TIMEOUT = 1

local function enable_start_leave_btns(is_enable)
	gui.set_enabled(gui.get_node("btn-leave-game"), is_enable)
	gui.set_enabled(gui.get_node("btn-start-game"), is_enable)
end
-- rooms data list
local function room_create_function(self, data, index, data_list)
	-- In data list create funtion we made all init stuff for this node
	local nodes = gui.clone_tree(self.prefab)
	local root = nodes["prefab"]
	gui.set_enabled(root, true)
	gui.set_text(nodes["text"], string.format("%s(%s): family %d / survs %d", data.name, data.state, data.family.length, data.survivors.length))

	local button = self.druid:new_button(root, function()
		if MainState.player.room ~= nil then return end

		gui.set_text(gui.get_node("room"), data.name)
		MainState.selectedRoom = data
		gui.set_enabled(gui.get_node("description"), true)
		MSG.BROADSOCK:get_rooms()
	end)
	button:set_click_zone(data_list.scroll.view_node)
	-- We should return in this function root node and optionally - Druid component
	return root, button
end

local function room_updateDataList(self)
	local data = {}

	table.insert(data, MainState.OFFLINE_ROOM)

	MainState.rooms:for_each(function (room)
		table.insert(data, room)
	end)
	self.data_list:set_data(data)

	if MainState.selectedRoom == nil then
		return
	end

	if MainState.selectedRoom.name ~= MainState.OFFLINE_ROOM.name then
		MainState.selectedRoom = MainState.rooms:find("name", MainState.selectedRoom.name)
	end

	local room = MainState.selectedRoom
	-- survivors
	local survivors = {}
	room.survivors:for_each(function (c_uid)
		print("survivors", c_uid, room.ready_players_map:get(c_uid), MainState.uid_to_username:get(c_uid))
		table.insert(survivors, {uid = c_uid, ready = room.ready_players_map:get(c_uid), username = MainState.uid_to_username:get(c_uid) or MainState.player.username})
		if MainState.player.uid == c_uid then
			enable_start_leave_btns(true)
		end
	end)

	self.survivors_data_list.data_list:set_data(survivors)

	-- family
	local family = {}
	room.family:for_each(function (c_uid)
		print("family", c_uid, room.ready_players_map:get(c_uid), MainState.uid_to_username:get(c_uid))
		table.insert(family, {uid = c_uid, ready = room.ready_players_map:get(c_uid), username = MainState.uid_to_username:get(c_uid) or MainState.player.username})
		if MainState.player.uid == c_uid then
			enable_start_leave_btns(true)
		end
	end)

	self.family_data_list.data_list:set_data(family)
end

local function room_show_results(self)
	self.prefab = gui.get_node("prefab")
	gui.set_enabled(self.prefab, false)

	self.scroll = self.druid:new_scroll("data_list_view", "data_list_content")
	self.scroll:set_horizontal_scroll(false)
	self.grid = self.druid:new_static_grid("data_list_content", "prefab", 1)

	-- Pass already created scroll and grid components to data_list:
	self.data_list = self.druid:new_data_list(self.scroll, self.grid, room_create_function)

	self.data_list:set_data({})
end

-- players data list
local function player_show_results(self, prefix)
	local M = {}
	function M.player_create_function(self, data, index, data_list)
		-- In data list create funtion we made all init stuff for this node
		local nodes = gui.clone_tree(M.prefab)
		local root = nodes[prefix .. "prefab"]
		gui.set_enabled(root, true)
		gui.set_text(nodes[prefix .. "text"], data.username)
		gui.set_enabled(nodes[prefix .. "ready"], data.ready == 1)

		local button = self.druid:new_button(root, function()
			print(data.username)
			self.selectedPlayer = data
		end)
		button:set_click_zone(data_list.scroll.view_node)
		-- We should return in this function root node and optionally - Druid component
		return root, button
	end

	M.prefab = gui.get_node(prefix .. "prefab")
	gui.set_enabled(M.prefab, false)

	M.scroll = self.druid:new_scroll(prefix .. "data_list_view", prefix .. "data_list_content")
	M.scroll:set_horizontal_scroll(false)
	M.grid = self.druid:new_static_grid(prefix .. "data_list_content", prefix .. "prefab", 1)

	-- Pass already created scroll and grid components to data_list:
	M.data_list = self.druid:new_data_list(M.scroll, M.grid, M.player_create_function)

	M.data_list:set_data({})
	return M
end

local function canStartGame(room)
	local half_players_count = (room.family.length + room.survivors.length) / 2
	return room.ready_players > half_players_count
end

local function game_pre_start(self)
	MainState.currentGameState = MainState.GAME_STATES.START
	gui.set_enabled(gui.get_node("survivors/btn"), false)
	gui.set_enabled(gui.get_node("family/btn"), false)
	gui.set_enabled(gui.get_node("btn-leave-game"), false)
	gui.set_text(gui.get_node("btn-join-/text"), "Starting...")
end

local function game_start(self)
	msg.post("/screens#main", "load_screen", {map_level = MainState.GAME_SCREENS.GAME})
end

local function register_druid_extended_components(self)
	druid.register("data_list", data_list)
	druid.register("input", input)
end

function init(self)
	log("init")

	msg.post(".", "acquire_input_focus")
	if MainState.selectedRoom ~= nil then
		gui.set_text(gui.get_node("room"), MainState.selectedRoom.name)
		gui.set_enabled(gui.get_node("description"), true)
	else
		gui.set_enabled(gui.get_node("description"), false)
	end
	self.druid = druid.new(self)
	register_druid_extended_components(self)
	room_show_results(self)
	self.survivors_data_list = player_show_results(self, "survivors/")
	self.family_data_list = player_show_results(self, "family/")

	self.input_username = self.druid:new_input("input_box_usual", "input_text_usual")
	self.input_username.on_input_text:subscribe(function (self, text)
		local text_width = self.input_username.total_width
		print(text_width, text, #text)
		if #text > 30 then
			self.input_username:set_text(text:sub(1, 30))
		else
			MSG.BROADSOCK:set_player_username({username = text})
			Storage.save({username = text})
		end
	end)

	MSG.BROADSOCK:get_usernames()

	enable_start_leave_btns(false)

	self.enabled = true
	self.update_timeout = UPDATE_TIMEOUT

	room_updateDataList(self)
end


function final(self)
	self.druid:final()
	msg.post(".", "release_input_focus")
end


function update(self, dt)
	self.druid:update(dt)

	if self.update_timeout < 0 then
		self.update_timeout = UPDATE_TIMEOUT
		gui.set_text(gui.get_node("choose-room"), string.format("Choose room! Online: %03d", MainState.online))
	end
	self.update_timeout = self.update_timeout - dt
end


function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)

	if message_id == hash("show") then
        gui.set_enabled(gui.get_node("root"), true)
		self.enabled = true
    elseif message_id == hash("hide") then
        gui.set_enabled(gui.get_node("root"), false)
		self.enabled = false
    elseif message_id == MSG.ROOMS.RECIEVE_USERNAMES.hash then
		MSG.BROADSOCK:get_rooms()
	elseif message_id == MSG.ROOMS.RECIEVE_ROOMS.hash then
        room_updateDataList(self)
		self.input_username:set_text(string.format("%.30s", MainState.player.username))
		if MainState.selectedRoom ~= nil then
			local btn_text = MainState.selectedRoom.state == MainState.RoomState.PLAYING and "Join" or "Ready"
			if not canStartGame(MainState.selectedRoom) then
				gui.set_text(gui.get_node("btn-join-/text"), btn_text)
			end
		end
	elseif message_id == hash("set_username") then
		MainState.player.username = message.username or "Uknown"
		self.input_username:set_text(string.format("%.30s", MainState.player.username))
	elseif message_id == hash("game_pre_start") then
		game_pre_start(self)
	elseif message_id == hash("game_start") then
		game_start(self)
    end
end


function on_input(self, action_id, action)
	local isOffline = MainState.selectedRoom ~= nil and MainState.selectedRoom.name == MainState.OFFLINE_ROOM.name
	if action_id == hash("touch") and self.enabled then
		btnAction(action, "btn-start-game", nil, nil, function ()
			if isOffline then
				game_pre_start(self)
				game_start(self)
			elseif not canStartGame(MainState.selectedRoom) then
				MSG.BROADSOCK:player_ready({room_name = MainState.selectedRoom.name})
			end
		end)
		btnAction(action, "btn-leave-game", nil, nil, function ()
			if not isOffline then
				MSG.BROADSOCK:leave_room({})
			end
			MainState.player.room = nil
			enable_start_leave_btns(false)
		end)
		btnAction(action, "survivors/btn", nil, nil, function ()
			if MainState.selectedRoom ~= nil and MainState.selectedRoom.survivors.length - MainState.selectedRoom.family.length < 1 then
				if isOffline then
					MainState.OFFLINE_ROOM:joinSurvivors(MainState.player.uid)
					MainState.OFFLINE_ROOM.ready_players = 1
					room_updateDataList(self)
				else
					MSG.BROADSOCK:join_room({room_name = MainState.selectedRoom.name, type = "survivors"})
				end
				MainState.player.type = MainState.PLAYER_TYPE.SURVIVOR
				MainState.player.room = MainState.selectedRoom
				enable_start_leave_btns(true)
			end
			-- MainState.selectedRoom:joinSurvivors(MainState.player.uid)
			-- room_updateDataList(self)
		end)
		btnAction(action, "family/btn", nil, nil, function ()
			if MainState.selectedRoom ~= nil and MainState.selectedRoom.family.length - MainState.selectedRoom.survivors.length < 1 then
				if isOffline then
					MainState.OFFLINE_ROOM:joinFamily(MainState.player.uid)
					MainState.OFFLINE_ROOM.ready_players = 1
					room_updateDataList(self)
				else
					MSG.BROADSOCK:join_room({room_name = MainState.selectedRoom.name, type = "family"})
				end
				MainState.player.type = MainState.PLAYER_TYPE.FAMILY
				MainState.player.room = MainState.selectedRoom
				enable_start_leave_btns(true)
			end
			-- MainState.selectedRoom:joinFamily(MainState.player.uid)
			-- room_updateDataList(self)
		end)
		btnAction(action, "btn-help", nil, nil, function ()
			msg.post("default:/gui#help", "show")
			msg.post("#", "hide")
		end)
	end

	return self.druid:on_input(action_id, action)
end
