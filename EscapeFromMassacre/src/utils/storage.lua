---
--- Generated by Luanalysis
--- Created by romanchekashov.
--- DateTime: 9/17/23 12:01 AM
---
local defsave = require "defsave.defsave"

defsave.appname = "escape_from_mafia"
-- local OBFUSCATION_KEY = "GHjks34.we42Hk"
local OBFUSCATION_KEY = nil

local Storage = {}

local function obfuscate(input)
    if OBFUSCATION_KEY == nil then
        return input
    end

    local key = OBFUSCATION_KEY
    local output = ""
    local key_iterator = 1

    local input_length = #input
    local key_length = #key

    for i=1, input_length do
        local character = string.byte(input:sub(i,i))
        if key_iterator >= key_length + 1 then key_iterator = 1 end -- cycle
        local key_byte = string.byte(key:sub(key_iterator,key_iterator))
        output = output .. string.char(bit.bxor( character , key_byte))

        key_iterator = key_iterator + 1

    end
    return output
end

local function encodeToStr(val)
    if OBFUSCATION_KEY ~= nil then
        -- Expected value but found invalid escape code at character 75
        return string.gsub(obfuscate(tostring(val)), "\\", "#")
    end

    return tostring(val)
end

local function decodeStr(obfuscatedString)
    if obfuscatedString == nil then
        return nil
    end

    if OBFUSCATION_KEY ~= nil then
        -- Expected value but found invalid escape code at character 75
        return obfuscate(string.gsub(obfuscatedString, "#", "\\"))
    end

    return obfuscatedString
end

local function getNumber(obfuscatedString)
    local str = decodeStr(obfuscatedString)
    if str == nil then
        return nil
    end
    print(obfuscatedString .. " - " .. str)
    return tonumber(str)
end

local function getBoolean(obfuscatedString)
    local str = decodeStr(obfuscatedString)
    if str == nil then
        return nil
    end
    return str == "true"
end


function Storage.load()
    local state = {}
    defsave.load("config")
    if defsave.is_loaded("config") then
        state = {
            username = defsave.get("config", "username")
        }
    end
    return state
end

function Storage.save(state)
    defsave.load("config")
    if defsave.is_loaded("config") then
        defsave.set("config", "username", state.username)
        defsave.save("config")
    end
end

return Storage
