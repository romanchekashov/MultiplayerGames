local MainState = require "src.main_state"

function init(self)
	-- use the x and y component to track which screen is currently displayed.
	self.screen_pos = vmath.vector3(0, 0, 0)
	self.next_screen = nil
	self.current_screen = nil
	self.loading = false
	self.map_level = MainState.MAP_LEVELS.LOBBY
	msg.post("#", "load_screen", {map_level = MainState.MAP_LEVELS.LOBBY})
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_screen") and self.map_level ~= message.level then
		if self.current_screen then
			-- if there was a current screen, delete it
			go.delete(self.current_screen)
		end

		self.map_level = message.map_level

		if message.map_level == MainState.MAP_LEVELS.LOBBY then
			MainState.playerOnMapLevel = MainState.MAP_LEVELS.LOBBY
			self.current_screen = collectionfactory.create("#collectionfactory-lobby", self.screen_pos)
			msg.post("@render:", "clear_color", {color = MainState.COLORS.GREEN})
		else
			if message.map_level == MainState.MAP_LEVELS.BASEMENT then
				MainState.playerOnMapLevel = MainState.MAP_LEVELS.BASEMENT
				self.current_screen = collectionfactory.create("#collectionfactory-basement", self.screen_pos)
				msg.post("@render:", "clear_color", {color = MainState.COLORS.RED_DARK})
	
				msg.post("/gate", "disable")
			elseif message.map_level == MainState.MAP_LEVELS.HOUSE then
				MainState.playerOnMapLevel = MainState.MAP_LEVELS.HOUSE
				self.current_screen = collectionfactory.create("#collectionfactory-house", self.screen_pos)
				msg.post("@render:", "clear_color", {color = MainState.COLORS.GREEN})
	
				if MainState.fixedFuzeBoxCount == 4 then
					msg.post("/gate", "disable")
				else
					msg.post("/gate", "enable")
				end
			end
	
			msg.post("/factory#fuze", "map_level_change", {map_level = self.map_level})
			msg.post("/factory#fuze-box", "map_level_change", {map_level = self.map_level})
		end
	elseif message_id == hash("gate_open") then
		if self.map_level == MainState.MAP_LEVELS.HOUSE and MainState.fixedFuzeBoxCount == 4 then
			msg.post("/gate", "disable")
		end
	end
end
