local debugUtils = require "src.utils.debug-utils"
local defold_utils = require "src.utils.defold-utils"
local MainState = require "src.main_state"
local assets = require "src.utils.assets"
local MSG = require "src.utils.messages"

local log = debugUtils.createLog("[MAIN]").log

-- local BROADSOCK = msg.url("default:/broadsock#script")
-- local BROADSOCK = msg.url("default:/server#broadsock")

function init(self)
	local enableLogs = true
	debugUtils.debug(enableLogs)
	--if html5 then
	--	if enableLogs then
	--		html5.run("enableLogs(true)")
	--	else
	--		html5.run("enableLogs(false)")
	--	end
	--end

	math.randomseed(os.time())

	MSG.BROADSOCK:connect({ ip = "127.0.0.1", port = 5001 })
	MSG.BROADSOCK:register_factory({ url = "/spawner-player#factory-player", type = "player" })
	MSG.BROADSOCK:register_factory({ url = "/spawner-zombie#factory-zombie", type = "zombie" })
	MSG.BROADSOCK:register_factory({ url = "/spawner-bullet#factory-bullet", type = "bullet" })

	self.screen_pos = vmath.vector3(0, 0, 0)
	self.next_screen = nil
	self.current_screen = nil
	self.loading = false
	self.map_level = MainState.GAME_SCREENS.LOBBY
	msg.post("#", "load_screen", {map_level = MainState.GAME_SCREENS.LOBBY})
	print("main init")
end

function on_message(self, message_id, message, sender)
	log("game", message_id)
	if message_id == hash("connected") then
		if sender == MSG.BROADSOCK.URL then
			log("connected: create player")
			-- factory.create("/factories#player", random_position(), nil, { remote = false })
		end
	elseif message_id == hash("disconnected") then
		if sender == MSG.BROADSOCK.URL then
			log("disconnected")
		end
	end

	if message_id == hash("load_screen") and self.map_level ~= message.level then
		if self.current_screen ~= nil then
			print("delete", #self.current_screen)
			-- if there was a current screen, delete it
			go.delete(self.current_screen)
		end


		if message.map_level == MainState.GAME_SCREENS.LOBBY then
			self.current_screen = collectionfactory.create("#collectionfactory-lobby", self.screen_pos)
			msg.post("@render:", "clear_color", {color = assets.COLORS.GREEN})
			print("LOBBY", #self.current_screen)
			go.set_position(vmath.vector3(-100, -100, 0), "crosshair")
		elseif message.map_level == MainState.GAME_SCREENS.GAME then
			self.current_screen = collectionfactory.create("#collectionfactory-game", self.screen_pos)
			msg.post("@render:", "clear_color", {color = assets.COLORS.GREEN})
			print("GAME", #self.current_screen)
			MainState.currentGameState = MainState.GAME_STATES.RUNNING
		end

		self.map_level = message.map_level
		defold_utils.SET_CURRENT_COLLECTION_IDS(self.current_screen)
	end
end
