local input = require "ludobits.m.input"

local MainState = require "src.main_state"
local debugUtils = require "src.utils.debug-utils"

local log = debugUtils.createLog("[PLAYER]").log

local insidePauseBound = MainState.insidePauseBound

go.property("angular_velocity", 5)
go.property("linear_velocity", 200)
go.property("remote", true)
go.property("uid", 0)

local LEFT = hash("left")
local RIGHT = hash("right")
local UP = hash("up")
local DOWN = hash("down")

local COLLISION_RESPONSE = hash("collision_response")
local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local WALL = hash("wall")
local STAIRS_TO_BASEMENT = hash("stairs_to_basement")
local STAIRS_TO_HOUSE = hash("stairs_to_house")
local FUSE_BOX = hash("fuse_box")
local KNIFE = hash("knife")

local ZOMBIE = hash("zombie")
local BULLET = hash("bullet")

local PLAYER_SPEED = 275
local STAIRS_CHANGE_COOLDOWN = 1

function init(self)
	local go_id = go.get_id()

	if not self.remote then
		msg.post(".", "acquire_input_focus")
		msg.post("camera", "acquire_camera_focus")
		msg.post("/broadsock", "register_gameobject", { id = go_id, type = "player" })
	end


	self.stairs_change_cooldown = -1
	self.move = 0		-- direction of movement (0 = standing still, 1 = forward, -1 = backward)
	self.rotate = 0		-- direction of rotation (0 = no rotation, 1 = left, -1 = right)	
	self.username = "user-" .. tostring(self.uid)
	self.velocity = vmath.vector3()

	label.set_text("#name", string.format("%.30s", self.username))

	local obj = MainState.createGameObject(self.uid, self.username, go_id)
	MainState.players:put(obj.uid, obj)
	if MainState.playerUidToScore[tostring(obj.uid)] == nil then
		MainState.playerUidToScore[tostring(obj.uid)] = 0
	end
	if MainState.playerUidToWsLatency[obj.uid] == nil then
		MainState.playerUidToWsLatency[obj.uid] = -1
	end
	msg.post("gui#menu", "set_online_players", {online_players = MainState.players.length})
	log("player joined: " .. self.username)
end

function final(self)
	local go_id = go.get_id()

	if not self.remote then
		msg.post(".", "release_input_focus")
		msg.post("camera", "release_camera_focus")
		msg.post("/broadsock", "unregister_gameobject", { id = go_id, killer_uid = self.killer_uid })
		msg.post("gui#menu", "non_remote_player_killed", {uid = self.uid})
	end

	MainState.players:remove(self.uid)
	msg.post("gui#menu", "set_online_players", {online_players = MainState.players.length})
end

function update(self, dt)
	if self.remote then
		return
	end
	
	msg.post("@render:", "draw_text", { text = sys.get_config("html5.archive_location_suffix") .. " Arrows or WASD to move/turn. Mouse to turn. Left mouse button/Space to fire.", position = vmath.vector3(20, 20, 0) } )

	local rotation = go.get_rotation()
	-- handle rotation from key input left/right
	if self.rotate ~= 0 then
		rotation = rotation * vmath.quat_rotation_z(self.angular_velocity * self.rotate * dt)
		go.set_rotation(rotation)
	-- rotate towards the latest mouse/touch location
	-- take into account camera position
	elseif self.touch then
		local to = go.get_position() - go.get_position("camera")
		local from = vmath.vector3(self.touch.x, self.touch.y, 0)
		local angle = math.atan2(to.x - from.x, from.y - to.y)
		rotation = vmath.quat_rotation_z(angle)
		go.set_rotation(rotation)
		self.touch = nil
	end
	
	-- move in direction of rotation
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)

	if input.is_pressed(LEFT) then
		self.velocity.x = -PLAYER_SPEED
	elseif input.is_pressed(RIGHT) then
		self.velocity.x = PLAYER_SPEED
	else
		self.velocity.x = 0
	end
	if input.is_pressed(UP) then
		self.velocity.y = PLAYER_SPEED
	elseif input.is_pressed(DOWN) then
		self.velocity.y = -PLAYER_SPEED
	else
		self.velocity.y = 0
	end

	-- update camera position
	go.set_position(pos + vmath.vector3(-568, - 320, 0), "camera")


	self.stairs_change_cooldown = self.stairs_change_cooldown - dt
end

function on_input(self, action_id, action)
	if MainState.pause or insidePauseBound(action) then
        return
    end

	input.update(action_id, action)

	if action_id == hash("rs_left") then
		self.rotate = action.value
	elseif action_id == hash("rs_right") then
		self.rotate = -action.value
	end

	-- handle touch/mouse movement by holding down the finger/mouse button
	if (action_id == hash("trigger") or action_id == hash("touch")) then
		if action.pressed then
			self.pressed_time = socket.gettime()
		elseif action.released then
			-- fire a bullet if the time between press and release is sufficiently short
			if socket.gettime() - self.pressed_time < 0.2 then
				-- local rotation = go.get_rotation()
				-- local position = go.get_position() + vmath.rotate(rotation, vmath.vector3(10, 50, 0))
				-- msg.post("spawner-bullet#script", "add_bullet", {pos = position, rot = rotation})
			end
		end
	end
	
	if not action_id then
		self.touch = action
	end
end

function on_message(self, message_id, message, sender)
	if message_id == COLLISION_RESPONSE then
		if message.group == BULLET or message.group == ZOMBIE then
			if not self.remote then
				self.killer_uid = MainState.bulletBelongToPlayerUid[message.other_id]
				MainState.increasePlayerScore(self.killer_uid)
				msg.post("spawner-player#script", "remove_player", {
					uid = self.uid,
					player_id = go.get_id()})
			end
			-- log("I collided with", go.get_id(), message.other_id, message.other_group)
		end
	elseif message_id == CONTACT_POINT_RESPONSE then
		if message.group == WALL then
			go.set_position(go.get_position() + message.normal * message.distance)
		end

		if self.stairs_change_cooldown < 0 then
			if message.group == STAIRS_TO_BASEMENT then
				msg.post("/levels#change", "load_screen", {is_basement = true})
				self.stairs_change_cooldown = STAIRS_CHANGE_COOLDOWN
			elseif message.group == STAIRS_TO_HOUSE then
				msg.post("/levels#change", "load_screen", {is_basement = false})
				self.stairs_change_cooldown = STAIRS_CHANGE_COOLDOWN
			end
		end
	end
end
