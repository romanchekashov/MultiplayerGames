local input = require "ludobits.m.input"

local MainState = require "src.main_state"
local debugUtils = require "src.utils.debug-utils"
local defoldUtils = require "src.utils.defold-utils"
local device = require "src.utils.device"

local ACTION_IDS = MainState.ACTION_IDS
local isGamepadActionId = MainState.isGamepadActionId
local isGamepadLeftStickActionId = MainState.isGamepadLeftStickActionId
local isGamepadRightStickActionId = MainState.isGamepadRightStickActionId
local IS_MOBILE = device.type == "mobile" or device.type == "tablet"
local log = debugUtils.createLog("[PLAYER]").log
local getRotation = defoldUtils.getRotation

local insidePauseBound = MainState.insidePauseBound
local insideVirtualGamepadLeftStickBound = defoldUtils.insideVirtualGamepadLeftStickBound

go.property("angular_velocity", 5)
go.property("linear_velocity", 200)
go.property("remote", true)
go.property("uid", 0)

local LEFT = hash("left")
local RIGHT = hash("right")
local UP = hash("up")
local DOWN = hash("down")

local RIGHT_STICK_RIGHT = hash("rs_right")
local RIGHT_STICK_LEFT = hash("rs_left")
local RIGHT_STICK_UP = hash("rs_up")
local RIGHT_STICK_DOWN = hash("rs_down")

local LEFT_STICK_LEFT = hash("ls_left")
local LEFT_STICK_RIGHT = hash("ls_right")
local LEFT_STICK_UP = hash("ls_up")
local LEFT_STICK_DOWN = hash("ls_down")

local COLLISION_RESPONSE = hash("collision_response")
local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local WALL = hash("wall")
local STAIRS_TO_BASEMENT = hash("stairs_to_basement")
local STAIRS_TO_HOUSE = hash("stairs_to_house")
local FUSE_BOX = hash("fuse_box")
local KNIFE = hash("knife")

local ZOMBIE = hash("zombie")
local BULLET = hash("bullet")

local STICK_MAX_DISTANCE = 30
local PLAYER_SPEED = 275
local STAIRS_CHANGE_COOLDOWN = 1
local HIT_COOLDOWN = 0.2

local CROSSHAIR_OFFSET = vmath.vector3(10,200,0)

local function get_rotation(touch)
	local to = go.get_position() - go.get_position("camera")
	local from = vmath.vector3(touch.x, touch.y, 0)
	local angle = math.atan2(to.x - from.x, from.y - to.y)
	return vmath.quat_rotation_z(angle)
end

local function input_controls(self)
	if input.is_pressed(LEFT) then
		self.velocity.x = -PLAYER_SPEED
	elseif input.is_pressed(RIGHT) then
		self.velocity.x = PLAYER_SPEED
	else
		self.velocity.x = 0
	end
	if input.is_pressed(UP) then
		self.velocity.y = PLAYER_SPEED
	elseif input.is_pressed(DOWN) then
		self.velocity.y = -PLAYER_SPEED
	else
		self.velocity.y = 0
	end
end

local function trigger(self, action)
	if action.pressed then
		self.pressed_time = socket.gettime()
	elseif action.released then
		-- fire a bullet if the time between press and release is sufficiently short
		if socket.gettime() - self.pressed_time < 0.2 then
			local rotation = go.get_rotation()
			local position = go.get_position() + vmath.rotate(rotation, vmath.vector3(10, 30, 0))
			msg.post("spawner-bullet#script", "add_bullet", {pos = position, rot = rotation})
		end
	end
end

function init(self)
	local go_id = go.get_id()

	self.stairs_change_cooldown = -1
	self.move = 0		-- direction of movement (0 = standing still, 1 = forward, -1 = backward)
	self.rotate = 0		-- direction of rotation (0 = no rotation, 1 = left, -1 = right)	
	self.username = "user-" .. tostring(self.uid)
	self.velocity = vmath.vector3()
	self.sound_run_playing = false
	self.right_stick_value = vmath.vector3()
	self.virtualGamepadLeftStickTouchNum = 0
	self.health_width = go.get("#scale-health", "size.x")
	self.health_one_cut = self.health_width / 5
	self.hit_cooldown = HIT_COOLDOWN

	label.set_text("#name", string.format("%.30s", self.username))

	local obj = MainState.createGameObject(self.uid, self.username, go_id, self.map_level or MainState.MAP_LEVELS.HOUSE)
	MainState.players:put(obj.uid, obj)
	
	if MainState.playerUidToScore[tostring(obj.uid)] == nil then
		MainState.playerUidToScore[tostring(obj.uid)] = 0
	end

	label.set_text("#scale-level", string.format("%d", MainState.playerUidToScore[tostring(obj.uid)] + 1))

	if MainState.playerUidToWsLatency[obj.uid] == nil then
		MainState.playerUidToWsLatency[obj.uid] = -1
	end

	msg.post("gui#menu", "set_online_players", {online_players = MainState.players.length})
	log("player joined: " .. self.username)

	if not self.remote then
		msg.post(".", "acquire_input_focus")
		msg.post("camera", "acquire_camera_focus")
		msg.post("/broadsock", "register_gameobject", { id = go_id, type = "player" })
		input.acquire()
		msg.post("virtual_gamepad", "register")

		msg.post("/levels#change", "load_screen", {map_level = obj.map_level})

		if IS_MOBILE then
			msg.post("default:/virtual_gamepad", "enable")
		else
			msg.post("default:/virtual_gamepad", "disable")
		end
	end
end

function final(self)
	local go_id = go.get_id()

	if not self.remote then
		msg.post(".", "release_input_focus")
		msg.post("camera", "release_camera_focus")
		msg.post("/broadsock", "unregister_gameobject", { id = go_id, killer_uid = self.killer_uid })
		msg.post("gui#menu", "non_remote_player_killed", {uid = self.uid})
		input.release()
		msg.post("virtual_gamepad", "unregister")
	end

	MainState.players:remove(self.uid)
	msg.post("gui#menu", "set_online_players", {online_players = MainState.players.length})
end

function update(self, dt)
	if self.remote then
		return
	end

	if MainState.pause then
		-- input_release_controls()
        return
    end
	
	msg.post("@render:", "draw_text", { text = sys.get_config("html5.archive_location_suffix") .. " Arrows or WASD to move/turn. Mouse to turn. Left mouse button/Space to fire.", position = vmath.vector3(20, 20, 0) } )

	local rotation = go.get_rotation()
	if not MainState.HAS_GAMEPAD then
		-- handle rotation from key input left/right
		if self.rotate ~= 0 then
			rotation = rotation * vmath.quat_rotation_z(self.angular_velocity * self.rotate * dt)
			go.set_rotation(rotation)
		-- rotate towards the latest mouse/touch location
		-- take into account camera position
		elseif self.touch then
			rotation = get_rotation(self.touch)
			go.set_rotation(rotation)
			self.touch = nil
		end
	end

	-- move in direction of rotation
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)

	input_controls(self)

	-- update camera position
	go.set_position(pos + vmath.vector3(-568, - 320, 0), "camera")

	go.set_position(pos + vmath.rotate(rotation, CROSSHAIR_OFFSET), "crosshair")

	self.stairs_change_cooldown = self.stairs_change_cooldown - dt

	if self.hit_cooldown < 0 then
		self.bullet_id = nil
	end
	self.hit_cooldown = self.hit_cooldown - dt
end

function on_input(self, action_id, action)
	-- print(action_id, action.value, action.pressed, action.released, "left stick", self.virtualGamepadLeftStickTouchNum)

	if action_id == ACTION_IDS.GAMEPAD.CONNECTED then
        if action.gamepad == 0 then
          -- gamepad 0 was connected
			log("gamepad_connected")
			MainState.HAS_GAMEPAD = true
			msg.post("default:/virtual_gamepad", "disable")
        end
    elseif action_id == ACTION_IDS.GAMEPAD.DISCONNECTED then
        if action.gamepad == 0 then
          -- gamepad 0 was dicconnected
		    log("gamepad_dicconnected")
			MainState.HAS_GAMEPAD = false
			if IS_MOBILE then
				msg.post("default:/virtual_gamepad", "enable")
			end
        end
    end

	-- if isGamepadActionId[action_id] then
	-- 	if not MainState.HAS_GAMEPAD  then
	-- 		MainState.HAS_GAMEPAD = true
	-- 		msg.post("default:/virtual_gamepad", "disable")
	-- 	end
	-- end

	if MainState.pause or insidePauseBound(action) then
		if self.sound_run_playing then
			MainState.SOUND.loop_run.stop()
			self.sound_run_playing = false
		end
        return
    end

	if MainState.HAS_GAMEPAD then
		-- FIX: Move with gamepad left stick
		if isGamepadLeftStickActionId[action_id] then
			if action_id == LEFT_STICK_LEFT then
				self.velocity.x = -PLAYER_SPEED
			elseif action_id == LEFT_STICK_RIGHT then
				self.velocity.x = PLAYER_SPEED
			end
			if action_id == LEFT_STICK_UP then
				self.velocity.y = PLAYER_SPEED
			elseif action_id == LEFT_STICK_DOWN then
				self.velocity.y = -PLAYER_SPEED
			end
		elseif isGamepadRightStickActionId[action_id] then
			if action_id == RIGHT_STICK_LEFT then
				self.right_stick_value.x = -STICK_MAX_DISTANCE * action.value
			elseif action_id == RIGHT_STICK_RIGHT then
				self.right_stick_value.x = STICK_MAX_DISTANCE * action.value
			elseif action_id == RIGHT_STICK_UP then
				self.right_stick_value.y = STICK_MAX_DISTANCE * action.value
			elseif action_id == RIGHT_STICK_DOWN then
				self.right_stick_value.y = -STICK_MAX_DISTANCE * action.value
			end
	
			if action.value ~= 0 then
				go.set_rotation(getRotation(go.get_position() + self.right_stick_value))
				-- go.set_rotation(vmath.quat_rotation_z(math.atan2(new_pos.y, new_pos.x)))
			end
		else
			input.update(action_id, action)
		end
	else
		input.update(action_id, action)
	end

	if action_id == LEFT or action_id == RIGHT or action_id == UP or action_id == DOWN then
		-- print(action_id, action.value, action.pressed, action.released, action.x, action.y) -- a value between 0.0 an -1.0
		if action.pressed and not self.sound_run_playing then
			MainState.SOUND.loop_run.play()
			self.sound_run_playing = true
		elseif action.released and self.sound_run_playing then
			MainState.SOUND.loop_run.stop()
			self.sound_run_playing = false
		end
	end

	if IS_MOBILE then
		-- if insideVirtualGamepadLeftStickBound(action) or defoldUtils.virtualGamepadLeftStickPressed then
		-- 	return
		-- end

		if action_id == hash("touch_multi") then
			-- Spawn at each touch point
			for i, touchdata in ipairs(action.touch) do
				-- print(i, "touchdata", touchdata.x, touchdata.y, touchdata.pressed, touchdata.released)
				if self.virtualGamepadLeftStickTouchNum == 0 and touchdata.pressed then
					if insideVirtualGamepadLeftStickBound(action) then
						self.virtualGamepadLeftStickTouchNum = i
					end
				end
				if self.virtualGamepadLeftStickTouchNum ~= i then
					trigger(self, touchdata)
					if touchdata.pressed then
						go.set_rotation(get_rotation(touchdata))
						-- go.set_rotation(getRotation(go.get_position() + vmath.vector3(touchdata.x, touchdata.y, 0)))
						-- go.set_rotation(vmath.quat_rotation_z(math.atan2(touchdata.y, touchdata.x)))
					end
				end
				if self.virtualGamepadLeftStickTouchNum == i and touchdata.released then
					self.virtualGamepadLeftStickTouchNum = 0
				end
			end
		end

		if action_id == hash("trigger") then
			trigger(self, action)
		end

		if not action_id then
			if not insideVirtualGamepadLeftStickBound(action) and self.virtualGamepadLeftStickTouchNum == 0 then
				self.touch = action
			end
		end
	else
		-- handle touch/mouse movement by holding down the finger/mouse button
		if (action_id == hash("trigger") or action_id == hash("touch")) then
			trigger(self, action)
		end

		if not action_id then
			self.touch = action
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update_health") then
		if self.uid == message.uid then
			go.set("#scale-health", "size.x", self.health_width * (message.health / 100))
		end
	elseif message_id == hash("update_score") then
		if self.uid == message.uid then
			label.set_text("#scale-level", string.format("%d", message.score + 1))

			particlefx.play("#level_up")
			MainState.SOUND.level_up()
			timer.delay(2, true, function ()
				particlefx.stop("#level_up")
			end)
			-- go.set("#scale-health", "size.x", self.health_width * (message.health / 100))
		end
	end

	if self.remote then
		return
	end

	if message_id == hash("analog") then
		-- print("analog: x", message.x, " - y", message.y, message.pressed, message.released)
		-- self.speed.x = message.x * 200
		-- self.speed.y = message.y * 200
		if message.x < 0 then
			self.velocity.x = -PLAYER_SPEED
		elseif message.x > 0 then
			self.velocity.x = PLAYER_SPEED
		else
			self.velocity.x = 0
		end
		if message.y > 0 then
			self.velocity.y = PLAYER_SPEED
		elseif message.y < 0 then
			self.velocity.y = -PLAYER_SPEED
		else
			self.velocity.y = 0
		end
	end

	if message_id == COLLISION_RESPONSE then
		if message.group == BULLET or message.group == ZOMBIE then
			-- print("I collided with", go.get_id(), message.other_id, message.other_group)
			if self.bullet_id ~= message.other_id then
				self.bullet_id = message.other_id
				self.killer_uid = MainState.bulletBelongToPlayerUid[message.other_id]

				local killer = MainState.players:get(self.killer_uid)
				if self.killer_uid == nil or (killer ~= nil and killer.map_level ~= MainState.playerOnMapLevel) then
					 return
				end
	
				local player = MainState.players:get(self.uid)
				player.health = player.health - 20
				
				go.set("#scale-health", "size.x", self.health_width * (player.health / 100))
	
				if player.health <= 0 then
					MainState.increasePlayerScore(self.killer_uid)
					msg.post("spawner-player#script", "remove_player", {
						uid = self.uid,
						player_id = go.get_id()})
				end

				self.hit_cooldown = HIT_COOLDOWN
			end
		end
	elseif message_id == CONTACT_POINT_RESPONSE then
		if message.group == WALL then
			go.set_position(go.get_position() + message.normal * message.distance)
		end

		if self.stairs_change_cooldown < 0 then
			if message.group == STAIRS_TO_BASEMENT then
				msg.post("/levels#change", "load_screen", {map_level = MainState.MAP_LEVELS.BASEMENT})
				self.stairs_change_cooldown = STAIRS_CHANGE_COOLDOWN
			elseif message.group == STAIRS_TO_HOUSE then
				msg.post("/levels#change", "load_screen", {map_level = MainState.MAP_LEVELS.HOUSE})
				self.stairs_change_cooldown = STAIRS_CHANGE_COOLDOWN
			end
		end
	end
end
