local MainState = require "src.main_state"
local Buttons = require "src.utils.buttons"
local ACTION_IDS = require "src.utils.actions"
local btnAction = Buttons.action
local server_nakama = require "client.server_nakama"
local debugUtils = require "src.utils.debug-utils"

local MSG = require "src.utils.messages"
local druid = require("druid.druid")
local timer_component = require("druid.extended.timer")
local log = debugUtils.createLog("[menu.gui_script]").log
local function seconds_to_string(seconds)
	local minutes = math.floor(seconds / 60)
	local remaining_seconds = seconds % 60
	return string.format("%02d:%02d", minutes, remaining_seconds)
end

local function set_pause(pause)
	print("set_pause", pause)
	MainState.pause = pause
	if not pause then
		local nodeBtnExit = gui.get_node("btn-exit")
		MainState.setPauseBound(gui.get_screen_position(nodeBtnExit), gui.get_size(nodeBtnExit))
	end
	gui.set_enabled(gui.get_node("panel-join"), pause)
	gui.set_enabled(gui.get_node("btn-exit"), not pause)
end

local function add_player_stat(player, pos, scale, parent, scorePosX)
	-- print(debugUtils.printTable(player), pos)
	-- Create a new text node
	local new_textnode = gui.new_text_node(pos, player.username .. " ping" .. tostring(player.ws_latency) .. "   " .. tostring(player.score))
	gui.set_scale(new_textnode, scale)
	gui.set_font(new_textnode, "tictactoe")
	if MainState.player.uid == player.uid then
		gui.set_color(new_textnode, vmath.vector4(0.9, 0.9, 0.9, 1.0))
	else
		gui.set_color(new_textnode, vmath.vector4(0.9, 0.3, 0.3, 1.0))
	end
	gui.set_parent(new_textnode, parent, false)
	return new_textnode
end

local function update_stats(self)
	local nodeId = gui.get_node("stats-playing")
	-- format score like: 006 with leading zeros
	gui.set_text(nodeId, string.format("Playing: %03d", MainState.players.length))

	for _,node in ipairs(self.playersTextNodes) do
		gui.delete_node(node)
	end
	self.playersTextNodes = {}
	-- print("menu_gui: players.length", MainState.players.length)
	local parent = gui.get_parent(nodeId)
	local pos = gui.get_position(nodeId)
	pos.x = pos.x + 20
	local scale = gui.get_scale(nodeId)
	-- local pos = vmath.vector3(500, 1000, 0)
	local scorePosX = gui.get_position(gui.get_node("stats-score")).x

	MainState:playerUidToScoreSortedForEach(function (player)
		pos.y = pos.y - 20
		local textNode = add_player_stat(player, pos, scale, parent, scorePosX)
		table.insert(self.playersTextNodes, textNode)
	end)
end

local UPDATE_STATS_INTERVAL = 2

local function onBtnExit(self)
	-- msg.post("spawner-player#script", "remove_player")
	set_pause(true)
end

local function onBtnJoin(self)
	if not MainState.players:has(MainState.player.uid) then
		--log("menu_gui: create_player")
		--MSG.BROADSOCK:create_player()
		--msg.post("spawner-player#script", "add_player", {uid = MainState.player.uid, player_type = MainState.player.type})
	end

	set_pause(false)
end


local function empty_callback(self, param)
	print("CLIENT TIMER GAME OVER: Empty callback. Param", param)
end
local function setup_timer(self)
	self.timer = self.druid:new_timer("timer", MainState.GAME_TIMEOUT_IN_SEC, 0, empty_callback)
end

local function register_druid_extended_components(self)
	druid.register("timer", timer_component)
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.druid = druid.new(self)
	register_druid_extended_components(self)
	--setup_timer(self)

	self.playersTextNodes = {}
	self.update_stats_timeframe = UPDATE_STATS_INTERVAL
	msg.post("gui#game-over", "hide")

	log("menu_gui: init")
	onBtnJoin(self)
end

function final(self)
	self.druid:final()

	msg.post(".", "release_input_focus")
end

function update(self, dt)
	self.druid:update(dt)

	if self.update_stats_timeframe < 0 then
		update_stats(self)
		self.update_stats_timeframe = UPDATE_STATS_INTERVAL
	end

	self.update_stats_timeframe = self.update_stats_timeframe - dt
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)

	if message_id == hash("set_online_players") then
		update_stats(self)
	elseif message_id == hash("create_player") then
		--timer.delay(MainState.RECREATE_PLAYER_TIMEOUT_IN_SEC, false, function ()
		--	if MainState.GAME_STATES.RUNNING == MainState.currentGameState then
		--		--MSG.BROADSOCK:create_player()
		--	end
		--end)
	elseif message_id == hash("player_exit") then
		print("player_exit")
		onBtnExit(self)
	elseif message_id == hash("update_timer") then
		local nodeId = gui.get_node("timer")
		gui.set_text(nodeId, seconds_to_string(message.time))
	elseif message_id == hash("game_start") then
		onBtnJoin(self)
	elseif message_id == hash("game_over") then
		--msg.post("/spawner-player#script", "remove_player")
		MainState.pause = true
		gui.set_enabled(gui.get_node("panel-join"), false)
		gui.set_enabled(gui.get_node("btn-exit"), false)
		MainState.currentGameState = MainState.GAME_STATES.END
		msg.post("gui#game-over", "show", {won_player_type = message.won_player_type})
	elseif message_id == hash("set_username") then
		local nodeId = gui.get_node("username")
        -- format max 30 characters
        gui.set_text(nodeId, string.format("Wellcome %.30s!", message.username))
	end
end

function on_input(self, action_id, action)
	if action_id == ACTION_IDS.JOIN and action.released then
		if MainState.pause then
			onBtnJoin(self)
		else
			onBtnExit(self)
		end
	end

	if action_id == hash("touch") then
		if MainState.pause then
			btnAction(action, "btn-leave-yes", nil, nil, function ()
				MSG.BROADSOCK:leave_room({})
			end)
			btnAction(action, "btn-leave-no", nil, nil, function ()
				set_pause(false)
			end)
		else
			btnAction(action, "btn-exit", nil, nil, function ()
				onBtnExit(self)
			end)
		end
	end

	return self.druid:on_input(action_id, action)
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
