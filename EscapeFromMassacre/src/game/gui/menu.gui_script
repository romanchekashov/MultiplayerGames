local MainState = require "src.main_state"
local Buttons = require "src.utils.buttons"
local btnAction = Buttons.action
local server_nakama = require "client.server_nakama"
local debugUtils = require "src.utils.debug-utils"

local druid = require("druid.druid")
local timer_component = require("druid.extended.timer")

local ACTION_IDS = MainState.ACTION_IDS


local function set_is_joined(self, is_joined)
	self.is_joined = is_joined
	gui.set_enabled(gui.get_node("panel-join"), not is_joined)
	gui.set_enabled(gui.get_node("btn-exit"), is_joined)
end

local function add_player_stat(player, pos, scale, parent, scorePosX)
	-- print(debugUtils.printTable(player), pos)
	-- Create a new text node
	local score = tostring(MainState.playerUidToScore[tostring(player.uid)])
	local ws_latency = tostring(MainState.playerUidToWsLatency[player.uid])
	local new_textnode = gui.new_text_node(pos, player.username .. " ping" .. ws_latency .. "   " .. score)
	gui.set_scale(new_textnode, scale)
	gui.set_font(new_textnode, "tictactoe")
	if MainState.player.uid == player.uid then
		gui.set_color(new_textnode, vmath.vector4(0.9, 0.9, 0.9, 1.0))
	else
		gui.set_color(new_textnode, vmath.vector4(0.9, 0.3, 0.3, 1.0))
	end
	gui.set_parent(new_textnode, parent, false)
	return new_textnode
end

local function update_stats(self)
	local nodeId = gui.get_node("stats-playing")
        -- format score like: 006 with leading zeros
		gui.set_text(nodeId, string.format("Playing: %03d", MainState.players.length))

		for _,node in ipairs(self.playersTextNodes) do
			gui.delete_node(node)
		end
		self.playersTextNodes = {}
		-- print("menu_gui: players.length", MainState.players.length)
		local parent = gui.get_parent(nodeId)
		local pos = gui.get_position(nodeId)
		pos.x = pos.x + 20
		local scale = gui.get_scale(nodeId)
		-- local pos = vmath.vector3(500, 1000, 0)
		local scorePosX = gui.get_position(gui.get_node("stats-score")).x

		MainState.playerUidToScoreSortedForEach(function (player)
			pos.y = pos.y - 20
			local textNode = add_player_stat(player, pos, scale, parent, scorePosX)
			table.insert(self.playersTextNodes, textNode)
		end)
end

local UPDATE_STATS_INTERVAL = 2

local function onGameOver(self)
	-- msg.post("spawner-player#script", "remove_player")
	set_is_joined(self, false)
	MainState.pause = true
	gui.set_enabled(gui.get_node("panel-join"), false)

	MainState.currentGameState = MainState.GAME_STATES.END
	msg.post("gui#game-over", "show")
end

local function onBtnExit(self)
	-- msg.post("spawner-player#script", "remove_player")
	set_is_joined(self, false)
	MainState.pause = true
end

local function onBtnJoin(self, player_type)
	if not MainState.players:has(MainState.player.uid) then
		msg.post("spawner-player#script", "add_player", {uid = MainState.player.uid, player_type = player_type})
	end

	local nodeBtnExit = gui.get_node("btn-exit")
	MainState.setPauseBound(gui.get_screen_position(nodeBtnExit), gui.get_size(nodeBtnExit))
	MainState.pause = false

	set_is_joined(self, true)
end


local function empty_callback(self, param)
	print("CLIENT TIMER GAME OVER: Empty callback. Param", param)
end
local function setup_timer(self)
	self.timer = self.druid:new_timer("timer", MainState.GAME_TIMEOUT_IN_SEC, 0, empty_callback)
end

local function register_druid_extended_components(self)
	druid.register("timer", timer_component)
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.druid = druid.new(self)
	register_druid_extended_components(self)
	setup_timer(self)

	self.playersTextNodes = {}
	MainState.pause = true
	set_is_joined(self, false)
	self.update_stats_timeframe = UPDATE_STATS_INTERVAL
	msg.post("gui#game-over", "hide")

	onBtnJoin(self, MainState.player.type)
end

function final(self)
	self.druid:final()

	msg.post(".", "release_input_focus")
end

function update(self, dt)
	self.druid:update(dt)

	if self.update_stats_timeframe < 0 then
		update_stats(self)
		self.update_stats_timeframe = UPDATE_STATS_INTERVAL
	end

	self.update_stats_timeframe = self.update_stats_timeframe - dt
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)

	if message_id == hash("set_online_players") then
		update_stats(self)
	elseif message_id == hash("non_remote_player_killed") then
		onBtnExit(self)
	elseif message_id == hash("player_exit") then
		onBtnExit(self)
	elseif message_id == hash("game_over") then
		onGameOver(self)
	elseif message_id == hash("set_username") then
		local nodeId = gui.get_node("username")
        -- format max 30 characters
        gui.set_text(nodeId, string.format("Wellcome %.30s!", message.username))
	end
end

function on_input(self, action_id, action)
	if action_id == ACTION_IDS.JOIN and action.released then
		if self.is_joined then
			onBtnExit(self)
		else
			onBtnJoin(self)
		end
	end

	if action_id == hash("touch") then
		if self.is_joined then
			btnAction(action, "btn-exit", nil, nil, function ()
				onBtnExit(self)
			end)
		else
			btnAction(action, "btn-join-survivor", nil, nil, function ()
				onBtnJoin(self, MainState.PLAYER_TYPE.SURVIVOR)
			end)
			btnAction(action, "btn-join-family", nil, nil, function ()
				onBtnJoin(self, MainState.PLAYER_TYPE.FAMILY)
			end)
		end
	end

	return self.druid:on_input(action_id, action)
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
