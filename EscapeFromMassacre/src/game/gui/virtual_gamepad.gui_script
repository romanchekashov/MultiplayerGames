local MainState = require "src.main_state"
local defoldUtils = require "src.utils.defold-utils"
local debugUtils = require "src.utils.debug-utils"


local log = debugUtils.createLog("[VIRTUAL_GAMEPAD]").log

local function post_to_listener(self, message_id, message)
	log("post_to_listener", message_id, message.x, message.y)
	if self.listener then
		msg.post(self.listener, message_id, message or {})
	end
end

local function on_analog(self, touch, control)
	local touch_position = vmath.vector3(touch.x, touch.y, 0)
	if touch.pressed then
		gui.cancel_animation(control.node, gui.PROP_POSITION)
		control.analog_pos = touch_position
		control.analog_offset = touch_position - control.node_start_position
	elseif touch.released then
		gui.animate(control.node, gui.PROP_POSITION, control.node_start_position, gui.EASING_OUTQUAD, 0.2)
		post_to_listener(self, "analog", { x = 0, y = 0 })
	else
		local diff = control.analog_pos - touch_position
		local dir = vmath.normalize(diff)
		local distance = vmath.length(diff)
		if distance > 0 then
			local radius = 80
			if distance > radius then
				touch_position = control.node_start_position - dir * radius
				distance = radius
			else
				touch_position = touch_position - control.analog_offset	
			end
			gui.set_position(control.node, touch_position)
			post_to_listener(self, "analog", { x = -dir.x * distance / radius, y = -dir.y * distance / radius })
		end
	end
end

local function on_control_a(self, touch, control)
	if touch.pressed then
		post_to_listener(self, "button_a", { pressed = true })
	elseif touch.released then
		post_to_listener(self, "button_a", { released = true })
	end
end

local function find_control_for_xy(self, x, y)
	for _,control in pairs(self.controls) do
		if gui.pick_node(control.node, x, y) then
			return control
		end
	end
end

local function find_control_for_touch_index(self, touch_index)
	for _,control in pairs(self.controls) do
		if control.touch_index == touch_index then
			return control
		end
	end
end


--- Register a virtual control
-- @param self
-- @param node Node represented by the control
-- @param fn Function to invoke when interacted with
local function register(self, node, fn)
	assert(node, "You must provide a node")
	assert(fn, "You must provide a function")
	if not self.controls then self.controls = {} end
	self.controls[node] = {
		node_start_position = gui.get_position(node),
		node = node,
		pressed = false,
		fn = fn,
	}
end

function init(self)
	log("init")
	msg.post(".", "acquire_input_focus")
	local rightStickNode = gui.get_node("analog")
	register(self, rightStickNode, on_analog)
	register(self, gui.get_node("button_a"), on_control_a)

	defoldUtils.setVirtualGamepadLeftStickBound(gui.get_screen_position(rightStickNode), gui.get_size(rightStickNode))
end

function final(self)
	log("final")
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("register") then
		log("register", sender)
		self.listener = sender
	elseif message_id == hash("unregister") then
		log("unregister", sender)
		self.listener = nil
	end
end

local function handle_touch(self, touch, touch_index)
	if touch.pressed then
		local control = find_control_for_xy(self, touch.x, touch.y)
		if control and not control.pressed then
			defoldUtils.virtualGamepadLeftStickPressed = true
			control.pressed = true
			control.touch_index = touch_index
			control.fn(self, touch, control)
		end
	elseif touch.released then
		local control = find_control_for_touch_index(self, touch_index)
		if control then
			defoldUtils.virtualGamepadLeftStickPressed = false
			control.pressed = false
			control.touch_index = nil
			control.fn(self, touch, control)
		end
	else
		local control = find_control_for_touch_index(self, touch_index)
		if control then
			defoldUtils.virtualGamepadLeftStickPressed = false
			control.fn(self, touch, control)
		end
	end
end

function on_input(self, action_id, action)
	-- log(action_id, action.value, action.pressed, action.released, action.gamepad)

	if action.touch then
		for i,tp in pairs(action.touch) do
			handle_touch(self, tp, i)
		end
	else
		handle_touch(self, action, 0)
	end
end
