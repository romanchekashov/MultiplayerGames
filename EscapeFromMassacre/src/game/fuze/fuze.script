local MainState = require "src.main_state"

local MSG_GROUPS = MainState.MSG_GROUPS

go.property("remote", true)
go.property("color", 1)

local function enable(self)
	msg.post("#fuze_red", "disable")
	msg.post("#fuze_green", "disable")
	msg.post("#fuze_blue", "disable")
	msg.post("#fuze_yellow", "disable")

	if self.color == MainState.FUZE.RED then
		msg.post("#fuze_red", "enable")
	elseif self.color == MainState.FUZE.GREEN then
		msg.post("#fuze_green", "enable")
	elseif self.color == MainState.FUZE.BLUE then
		msg.post("#fuze_blue", "enable")
	elseif self.color == MainState.FUZE.YELLOW then
		msg.post("#fuze_yellow", "enable")
	end
end

function init(self)
	local id = go.get_id()

	self.isServer = MainState.isServer

	if self.isServer then
		MainState.register_gameobject(0, id, MainState.FACTORY_TYPES.fuze)
	else
		msg.post("/broadsock", "register_gameobject", { id = id, type = MainState.FACTORY_TYPES.fuze })
	end

	enable(self)
	MainState.fuzesIdToColor[id] = self.color
	print("[FUZE] created", self.color)
end

function final(self)
	if self.isServer then
		MainState.unregister_gameobject({ id = go.get_id() })
	else
		msg.post("/broadsock", "unregister_gameobject", { id = go.get_id() })
	end
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == MSG_GROUPS.COLLISION_RESPONSE then
		if message.group == MSG_GROUPS.BOX then
			print("I collided with", go.get_id(), message.other_id, message.other_group)
			go.delete(message.other_id)
		end
	elseif message_id == MSG_GROUPS.CONTACT_POINT_RESPONSE then
		if message.group == MSG_GROUPS.WALL then
			-- print(go.get_position(), message_id, message.group, message.other_id, message.normal, message.distance, message.normal * message.distance)
			-- go.set_position(go.get_position() + message.normal * message.distance)
			local pos = go.get_position() + vmath.vector3(50, 50, 0)
			if pos.x > 3600 then
				pos.x = 3550
			end
			if pos.y > 2900 then
				pos.y = 2850
			end
			go.set_position(pos)
		end
	elseif message_id == MSG_GROUPS.ENABLE then
		enable(self)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
