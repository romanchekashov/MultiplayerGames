local MainState = require "src.main_state"
local debugUtils = require "src.utils.debug-utils"
local log = debugUtils.createLog("[FUZE_BOX]").log

local MSG_GROUPS = MainState.MSG_GROUPS

local fuze_color_to_texture = {
	[MainState.FUZE.RED] = {open = "fuze_box_red_open", close = "fuze_box_red_close"},
	[MainState.FUZE.GREEN] = {open = "fuze_box_green_open", close = "fuze_box_green_close"},
	[MainState.FUZE.BLUE] = {open = "fuze_box_blue_open", close = "fuze_box_blue_close"},
	[MainState.FUZE.YELLOW] = {open = "fuze_box_yellow_open", close = "fuze_box_yellow_close"},
}

go.property("remote", true)
go.property("color", 1)

local function enable(self)
	sprite.play_flipbook("#sprite", fuze_color_to_texture[self.color].open)
	-- msg.post("#sprite", "play_animation", {id = hash(fuze_color_to_texture[self.color].open)})
end

local function fuze_box_fixed(self)
	log("fuze_box_fixed", self.color)
	sprite.play_flipbook("#sprite", fuze_color_to_texture[self.color].close)
	msg.post("#collisionobject", "disable")
	MainState.fixedFuzeBoxCount = MainState.fixedFuzeBoxCount + 1
	MainState.fuzeBoxColorToState[self.color] = 1

	local fixedCount = 0
	for _, v in ipairs(MainState.fuzeBoxColorToState) do
		if v > 0 then
			fixedCount = fixedCount + 1
		end
	end

	if fixedCount == 4 then
		msg.post("/levels#change", "gate_open", {})
	end
end

function init(self)
	self.isServer = MainState.isServer
	self.fuze_box_state = 0
	local id = go.get_id()

	if self.isServer then
		MainState.register_gameobject(0, id, MainState.FACTORY_TYPES.fuze_box)
	else
		msg.post("/broadsock", "register_gameobject", { id = id, type = MainState.FACTORY_TYPES.fuze_box })
	end
	-- print(go.get("#fuze_box_sprite", "image"))
	enable(self)
	MainState.fuzeBoxIdsToColor[id] = self.color
end

function final(self)
	if self.isServer then
		MainState.unregister_gameobject({ id = go.get_id() })
	else
		msg.post("/broadsock", "unregister_gameobject", { id = go.get_id() })
	end
end

function update(self, dt)
	if MainState.fuzeBoxColorToState[self.color] ~= self.fuze_box_state then
		self.fuze_box_state = MainState.fuzeBoxColorToState[self.color]
		if self.fuze_box_state == 1 then
			fuze_box_fixed(self)
		end
	end
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == MSG_GROUPS.COLLISION_RESPONSE then
		if message.group == MSG_GROUPS.BOX then
			print("I collided with", go.get_id(), message.other_id, message.other_group)
			go.delete(message.other_id)
		end
	elseif message_id == hash("fuze_box_fixed") then
		fuze_box_fixed(self)
	elseif message_id == MSG_GROUPS.ENABLE then
		enable(self)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
