local broadsock = require "client.broadsock"
local stream = require "client.stream"
local MSG = require "src.utils.messages"
local MainState = require "src.main_state"

local debugUtils = require "src.utils.debug-utils"

local log = debugUtils.createLog("[broadsock.script]").log

local CONNECTOR_MSG_IDS = {
	RELIABLE_CONNECTION_READY = "RELIABLE_CONNECTION_READY",
	FAST_UNRELIABLE_CONNECTION_READY = "FAST_UNRELIABLE_CONNECTION_READY",
}
local hasReliableConnection = false
local hasFastUnreliableConnection = false

local msgs = {
	[MSG.BROADSOCK.msg_ids.create_player] = MSG.BASE_MSG_IDS.CREATE_PLAYER,
	[MSG.BROADSOCK.msg_ids.create_room] = MSG.BASE_MSG_IDS.CREATE_ROOM,
	[MSG.BROADSOCK.msg_ids.get_usernames] = MSG.BASE_MSG_IDS.GET_USERNAMES,
	[MSG.BROADSOCK.msg_ids.get_rooms] = MSG.BASE_MSG_IDS.ROOMS_GET,
}
local msgs_with_data = {
	[MSG.BROADSOCK.msg_ids.join_room] = true,
	[MSG.BROADSOCK.msg_ids.leave_room] = true,
	[MSG.BROADSOCK.msg_ids.player_ready] = true,
	[MSG.BROADSOCK.msg_ids.set_player_username] = true,
	[MSG.BROADSOCK.msg_ids.send_reliable_go] = true,
	[MSG.BROADSOCK.msg_ids.send_reliable_god] = true,
}
local udp_msgs_with_data = {
	[MSG.BROADSOCK.msg_ids.player_commands] = true,
}

local function sendToReliableConnection(msg)
	if html5 and hasReliableConnection then
		log("[sendToReliableConnection]", msg)
		html5.run("WebSocketReliableConnectionSendData('".. msg .."')")
	end
end

-- UDP connection doesn't guaranty delivery!
local function sendToUnreliableAndFastConnection(msg)
	if html5 and hasFastUnreliableConnection then
		log("[sendToUnreliableAndFastConnection]", msg)
		html5.run("WebTransportSendData('".. msg .."')")
	else
		sendToReliableConnection(msg)
	end
end

local function js_listener(self, message_id, message)
	--log(message_id, message)
	if message_id == "ServerMsg" then
		if message:sub(1, 12) == MSG.BASE_MSG_IDS.ROOMS then
			MainState.setRooms(message)
		elseif message:sub(1, 16) == MSG.BASE_MSG_IDS.USERNAMES then
			MainState.setUsernames(message)
		else
			self.client.on_data(message, #message)
		end
	elseif message_id == CONNECTOR_MSG_IDS.RELIABLE_CONNECTION_READY then
		hasReliableConnection = true
		sendToReliableConnection("CONNECT_ME." .. message)
	elseif message_id == CONNECTOR_MSG_IDS.FAST_UNRELIABLE_CONNECTION_READY then
		hasFastUnreliableConnection = true
	end
end

local function on_disconnected(self)
	log("On disconnected")
	msg.post(self.creator, "disconnected")
	self.client = nil
end

local function on_connected(self)
	log("On connected")
	msg.post(self.creator, "connected")
end

local function on_custom_message(self, msg_id, from_uid, stream_reader)
	log("On custom message")
	msg.post(self.creator, "message", { msg_id = msg_id, from = from_uid })
end

local function connect(self, ip, port)
	-- wrap callback function and pass self as first argument
	local function callback(fn)
		return function(...) fn(self, ...) end
	end

	local client, err = broadsock.create(
		ip, port,
		callback(on_custom_message),
		callback(on_connected),
		callback(on_disconnected),
		sendToReliableConnection,
		sendToUnreliableAndFastConnection)

	html5.run("CreateWeb–°onnection()")

	if err then
		log("Unable to connect to server", err)
		msg.post(self.creator, "disconnected")
		return
	end
	self.client = client
end

function init(self)
	if jstodef then
	  jstodef.add_listener(js_listener)
	end
end

function final(self)
	if self.client then
		self.client.destroy()
	end
end

function update(self, dt)
	if self.client then
		--self.client.update(dt)
	end
end

function on_message(self, message_id, message, sender)
	if not self.client then
		if message_id == MSG.BROADSOCK.msg_ids.connect then
			self.creator = sender
			connect(self, message.ip, message.port)
		end
	else
		if message_id == MSG.BROADSOCK.msg_ids.register_gameobject then
			self.client.register_gameobject(message.id, message.type)
		elseif message_id == MSG.BROADSOCK.msg_ids.unregister_gameobject then
			self.client.unregister_gameobject(message)
		elseif message_id == MSG.BROADSOCK.msg_ids.register_factory then
			self.client.register_factory(message.url, message.type)
		elseif msgs[message_id] ~= nil then
				sendToReliableConnection(msgs[message_id])
		elseif msgs_with_data[message_id] ~= nil then
				sendToReliableConnection(message.data)
		elseif udp_msgs_with_data[message_id] ~= nil then
				sendToUnreliableAndFastConnection(message.data)
		elseif message_id == hash("send_message") then
			local sw = stream.writer()
			for _,value in ipairs(message) do
				if type(value) == "string" then
					sw.string(value)
				elseif type(value) == "number" then
					sw.number(value)
				else
					error("Invalid type when writing to stream")
				end
			end
			self.client.send(sw.tostring())
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
